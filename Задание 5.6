# Функция для печати игрового поля
def print_board(board):
    print("\n".join([" | ".join(row) for row in board]))
    print()
# Функция для проверки победы
def check_winner(board, player):
    # Проверка строк, столбцов и диагоналей
    return any(all(cell == player for cell in row) for row in board) or \
        any(all(board[row][col] == player for row in range(3)) for col in range(3)) or \
        all(board[i][i] == player for i in range(3)) or \
        all(board[i][2 - i] == player for i in range(3))

# Функция для проверки, остались ли пустые клетки
def has_empty_cells(board):
    return any(cell == ' ' for row in board for cell in row)

# Основная функция игры
def play_game():
    # Инициализация игрового поля 3x3
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'
    while True:
        print_board(board)
        # Ввод хода игрока
        try:
            row = int(input(f"Игрок {current_player}, введите номер строки (1-3): ")) - 1
            col = int(input(f"Игрок {current_player}, введите номер столбца (1-3): ")) - 1
        except ValueError:
            print("Пожалуйста, введите числа от 1 до 3.")
            continue
        # Проверка на корректность ввода
        if row not in range(3) or col not in range(3):
            print("Некорректные координаты. Попробуйте снова.")
            continue
        if board[row][col] != ' ':
            print("Эта клетка уже занята. Попробуйте другую.")
            continue
        # Сделать ход
        board[row][col] = current_player
        # Проверка победы
        if check_winner(board, current_player):
            print_board(board)
            print(f"Игрок {current_player} победил!")
            break
        # Проверка на ничью
        if not has_empty_cells(board):
            print_board(board)
            print("Ничья!")
            break
        # Смена игрока
        current_player = 'O' if current_player == 'X' else 'X'
# Запуск игры
play_game()
